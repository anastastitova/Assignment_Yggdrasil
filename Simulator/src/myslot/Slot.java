package myslot;

public class Slot {
	static int board_height = 3;
	static int board_width = 5;
	static int stake = 10;
	static int win_limit = 25000000;
	static int number_of_winlines = 10;
	static int[][] winlines = {{0,0,0,0,0},
					   		   {1,1,1,1,1},
					   		   {2,2,2,2,2},
					   		   {0,0,1,2,2},
					   		   {2,2,1,0,0},
					   		   {1,0,0,0,1},
					   		   {1,2,2,2,1},
					   		   {1,1,2,1,1},
					   		   {0,1,2,1,0},
					   		   {2,1,0,1,2}};
	int number_of_symbols = 10;
	// for stats
	static String[] symbol_names = {"Sun          ", "Umbrella     ", "Female surfer", "Male surfer  ", "A            ", "K            ", "Q            ", "J            ", "Wild", "Scatter"};
	static int[][] paytable = {{0,0,30,70,200},  // 0 symbol (Sun)
							   {0,0,20,60,150},  // 1 symbol (Umbrella)
							   {0,0,20,50,100},   // 2 symbol (Female surfer)
							   {0,0,20,50,100},   // 3 symbol (Male surfer)
							   {0,0,10,30,80},   // 4 symbol (A)
							   {0,0,10,30,80},   // 5 symbol (K)
							   {0,0,10,25,50},   // 6 symbol (Q)
							   {0,0,10,25,50},   // 7 symbol (J)
							   {0,0,0,0,0},       // 8 symbol (Wild)
							   {0,0,0,0,0}};      // 9 symbol (Scatter)
	static int[][][] reels_base = {{{6,6,6,3,7,6,7,3,3,5,7,6,3,3,9,7,7,7,3,4,7,6,6,7,7,4,4,7,5,6,7,8,9,5,5,3,6,6,6,1,1,4,4,2,6,6,7,5,5,5,2,2,2,7,7,2,1,7,2,2,5,7,7,6,9,5,5,8,3,6,6,4,7,7,7,5,5,5,4,3,3,3,1,1,5,4,6,6,1,7,7,1,4,4,4,6,6,4,7,7,1,1,1,3,3,5,8,0,6,9,7,6,2,3,9,6,6,6,2,7,7,7,5,5,8,2,2,3,4,5,6,8,5,5,3,3,3,2,4,4,6,6,6,7,7,7,4,4,2,2,2,5,6,8,5,5,0,0,4,4,4,0,0,0},
					 			 {5,5,6,4,4,3,5,6,6,6,5,5,3,4,1,6,7,7,4,6,6,7,7,7,4,4,6,6,7,7,6,6,6,3,3,3,7,7,0,0,7,3,0,6,6,6,7,1,1,1,8,7,6,6,8,7,4,2,5,5,3,8,2,2,7,7,7,2,2,2,6,8,7,4,4,4,5,5,7,7,3,3,9,2,2,2,4,6,5,7,9,3,6,4,4,2,3,5,9,6,5,3,3,3,2,7,7,7,4,5,1,4,4,4,2,8,6,6,9,5,5,5,7,7,5,5,6,6,6,5,5,5,4,8,1,1,7,6,6,2,5,1,4,4,7,7,7,2,2,5,3,3,7,9,0,0,0,6,1,1,3,3,6,7},
					 			 {5,5,4,6,5,5,7,4,5,5,5,6,6,6,4,4,9,5,5,4,7,7,7,2,2,2,6,9,8,6,3,3,6,7,7,7,6,6,7,7,6,5,3,3,3,7,7,7,6,6,6,2,2,5,5,7,3,3,3,2,4,4,8,0,0,0,5,9,7,7,8,5,5,3,1,1,4,3,3,7,7,7,1,4,4,2,6,7,9,3,5,8,1,1,5,2,7,7,9,6,4,7,3,3,7,7,2,5,4,6,6,2,2,2,0,0,8,6,2,3,1,8,7,5,5,5,7,6,6,6,5,7,7,1,0,3,6,6,7,4,4,6,6,3,1,1,1,5,7,9,6,6,4,4,2,2,7,3,6,6,6,4,4,4},
					 			 {0,0,0,2,6,4,4,4,1,7,7,7,4,3,3,7,4,4,7,6,6,6,7,7,7,2,8,7,6,6,6,5,5,4,9,7,2,2,4,5,6,6,4,2,5,6,6,5,5,7,9,8,4,7,7,5,6,6,6,5,5,7,6,3,9,8,4,4,4,8,7,5,2,2,3,3,5,7,2,2,2,6,4,4,4,5,5,5,7,7,3,6,2,7,7,7,8,1,4,4,5,6,7,7,6,5,5,5,6,6,8,3,3,1,1,5,5,5,3,7,7,6,2,2,2,6,6,5,5,3,4,1,3,7,7,7,9,6,6,6,3,3,3,7,7,1,1,7,4,4,1,1,1,0,5,9,6,6,0,0,6,3,3,3},
					 			 {5,7,7,7,4,4,4,7,7,7,6,6,7,4,3,3,3,4,7,7,5,5,7,7,1,5,5,5,7,5,5,8,6,7,9,0,0,0,7,7,7,9,1,7,3,1,2,2,2,3,3,6,4,4,3,7,0,0,2,5,6,7,2,5,3,1,1,6,7,1,1,1,2,2,2,8,7,7,5,5,4,2,2,6,6,0,1,1,6,3,5,5,6,9,3,3,2,7,4,8,3,9,6,3,3,4,4,5,3,3,3,6,6,4,7,6,6,6,8,2,7,7,7,6,4,4,4,6,6,5,5,5,8,6,6,6,4,5,7,7,6,6,6,7,7,6,6,6,5,5,5,9,2,2,5,4,4,4,6,6,5,4,4,8}},
			
								   {{6,6,6,3,0,4,9,6,2,2,4,6,3,3,6,6,0,0,6,6,9,2,1,1,6,6,7,7,0,9,4,4,7,7,5,2,8,4,7,7,3,5,6,6,7,7,7,1,4,4,7,7,7,3,6,4,9,5,5,7,4,6,5,8,2,2,2,9,4,4,6,5,5,5,3,3,9,8,4,7,7,9,5,5,6,6,6,1,1,4,4,2,6,7,5,5,6,6,6,7,5,0,0,7,2,6,6,6,2,2,2,4,3,3,6,6,5,5,7,3,3,3,7,7,7,5,1,8,5,6,7,0,1,3,8,7,7,0,0,0,7,6,9,1,1,1,7,7,5,5,8,9,4,4,2,2,3,3,3,7,9,5,7,3},
					 				 {7,7,7,3,3,6,7,3,3,3,6,6,8,3,4,0,7,7,6,5,7,7,9,2,2,2,9,1,1,4,4,5,7,7,6,8,9,5,5,2,7,4,8,6,6,4,2,7,9,8,6,6,6,5,2,2,4,4,4,5,5,2,2,7,7,6,6,7,7,7,3,9,7,5,6,6,6,1,9,5,5,3,3,1,7,5,5,4,6,6,3,3,3,5,8,7,6,6,3,1,1,1,6,5,5,7,1,6,6,6,7,3,5,9,4,7,7,7,4,4,9,5,6,3,3,6,1,1,2,5,0,0,2,6,4,3,9,5,5,7,9,4,4,9,7,7,0,0,0,6,6,6,4,4,7,7,2,2,2,8,9,4,4,6},
					 				 {0,0,7,3,3,5,7,7,5,7,2,2,6,6,6,7,7,6,6,7,6,6,8,9,5,8,6,7,3,0,0,7,6,3,3,6,1,7,6,2,2,9,1,6,6,9,5,5,4,0,0,0,8,5,5,5,4,6,6,6,9,4,4,6,7,1,2,9,4,4,3,3,2,2,6,6,6,7,7,8,6,6,4,4,6,5,1,3,7,7,7,1,1,3,6,6,4,5,0,3,3,3,7,9,2,4,5,9,7,7,9,5,5,7,7,7,9,2,2,2,4,4,2,3,5,7,7,7,9,6,4,4,2,3,3,3,7,7,4,6,6,8,1,1,1,5,5,1,1,8,4,5,5,9,4,4,5,5,7,6,3,7,7,7},
					 				 {3,3,5,5,6,6,9,5,5,6,6,6,5,5,9,6,8,5,7,2,6,3,4,4,4,6,7,7,7,6,1,7,0,0,6,7,7,1,6,6,6,3,4,5,7,6,6,6,7,7,7,0,0,0,4,3,5,2,2,8,4,1,1,9,7,7,6,6,2,2,2,1,1,7,4,4,4,5,7,7,5,2,8,7,5,5,5,6,6,7,7,8,3,3,4,8,7,7,7,2,2,9,5,5,0,0,8,3,3,3,9,4,4,9,7,4,9,3,5,5,6,3,3,7,7,7,9,4,4,7,6,9,1,2,7,3,1,1,1,5,5,7,4,6,6,2,2,2,6,6,3,3,3,5,6,2,4,4,7,7,5,9,6,6},
					 				 {5,9,5,1,1,3,7,7,2,2,2,5,7,7,1,6,5,5,7,6,6,7,7,6,6,5,5,9,7,6,6,3,3,3,7,9,6,6,5,3,6,6,6,1,1,1,8,9,4,0,6,5,1,2,0,0,0,1,9,7,7,3,3,2,9,7,7,4,4,9,6,7,7,7,6,4,9,5,4,0,7,4,6,5,5,7,4,6,6,6,4,3,3,4,4,7,7,8,3,7,6,8,5,3,4,4,4,2,5,6,6,6,9,1,7,7,7,8,3,7,7,7,6,6,9,5,5,9,6,2,2,3,3,3,6,6,6,7,2,1,1,5,8,7,5,4,4,2,2,2,0,0,4,4,8,2,2,6,7,4,5,5,3,3}}};
	
	static int[][][] weights_base = {{{7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
					   		  	   {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
					   		  	   {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
					   		  	   {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
					   		  	   {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}},
			
									{{2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,70,2,70,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1},
					   		  		   {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,70,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,70,2,2,2,2,70,2,2,2,2,2,2,2,2,2,70,2,2,1,1,1,1,1,1,70,1,1},
					   		  		   {88,2,2,2,2,2,2,88,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,88,2,2,2,2,2,88,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,87,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,87,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,87,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,87,1,1,1,1,1,1,1},
					   		  		   {2,2,59,2,2,2,2,59,2,2,2,2,2,59,2,2,2,2,2,2,2,2,2,59,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,58,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,58,2,2,2,2,2,2,2,2,58,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,58,2,2,2,2,2,2,2,2,58,2,2,2,2,2,2,2,2,2,2,2,58,2,58,2,2,2,2,2,2,2,2,2,2,2,2,2,2,58,2,2,2,1,1,1,1},
					   		  		   {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,88,2,2,2,2,2,2,2,2,2,88,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,88,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,88,2,2,2,2,2,2,2,2,2,2,2,87,2,2,87,2,87,2,2,2,2,2,2,2,87,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1}}};
	static int[] reelsets_weights_base = {80, 20};
	static int[] prefix_base_section = new int[3];
	
	static int[][] reels_fs = {{6,6,6,3,7,6,7,3,3,5,7,6,3,3,9,7,7,7,3,4,7,6,6,7,7,4,4,7,5,6,7,8,9,5,5,5,6,6,6,1,1,4,4,4,6,6,7,5,5,5,2,2,2,7,7,2,1,7,2,2,5,7,7,6,9,5,5,8,3,6,6,4,7,7,7,5,5,5,4,3,3,3,1,1,5,4,6,6,1,7,7,1,4,4,4,6,6,4,7,7,1,1,1,3,3,5,8,0,6,9,7,6,2,3,9,6,6,6,2,7,7,7,5,5,8,2,2,3,4,5,6,8,5,5,3,3,3,2,4,4,6,6,6,7,7,7,4,4,2,2,2,5,6,8,5,5,0,0,4,4,4,0,0,0},
	 						   {5,5,6,4,4,3,5,6,6,6,5,5,5,4,1,6,7,7,4,6,6,7,7,7,4,4,6,6,7,7,6,6,6,3,3,3,7,7,0,0,7,3,0,6,6,6,7,1,1,1,8,7,6,6,8,7,4,2,5,5,3,8,2,2,7,7,7,2,2,2,6,8,7,4,4,4,5,5,7,7,3,3,9,2,2,2,4,6,5,7,9,3,6,4,4,4,3,5,9,6,5,3,3,3,2,7,7,7,4,5,1,4,4,4,2,8,6,6,9,5,5,5,7,7,5,5,6,6,6,5,5,5,4,8,1,1,7,6,6,2,5,1,4,4,7,7,7,2,2,5,3,3,7,9,0,0,0,6,1,1,3,3,6,7},
	 						   {5,5,4,6,5,5,7,4,5,5,5,6,6,6,4,4,4,5,5,4,7,7,7,2,2,2,6,9,8,6,3,3,6,7,7,7,6,6,7,7,6,5,3,3,3,7,7,7,6,6,6,2,2,5,5,7,3,3,3,2,4,4,8,0,0,0,5,9,7,7,8,5,5,5,1,1,4,3,3,7,7,7,1,4,4,4,6,7,9,3,5,8,1,1,5,2,7,7,9,6,4,7,3,3,7,7,2,5,4,6,6,2,2,2,0,0,8,6,2,3,1,8,7,5,5,5,7,6,6,6,5,7,7,1,0,3,6,6,7,4,4,6,6,3,1,1,1,5,7,9,6,6,4,4,2,2,7,3,6,6,6,4,4,4},
	 						   {0,0,0,2,6,4,4,4,1,7,7,7,4,3,3,7,4,4,7,6,6,6,7,7,7,2,8,7,6,6,6,5,5,4,9,7,2,2,4,5,6,6,4,2,5,6,6,5,5,7,9,8,4,7,7,5,6,6,6,5,5,7,6,3,9,8,4,4,4,8,7,5,2,2,3,3,5,7,2,2,2,6,4,4,4,5,5,5,7,7,3,6,2,7,7,7,8,1,4,4,5,6,7,7,6,5,5,5,6,6,8,3,3,1,1,5,5,5,3,7,7,6,2,2,2,6,6,5,5,3,4,1,3,7,7,7,9,6,6,6,3,3,3,7,7,1,1,7,4,4,1,1,1,0,5,9,6,6,0,0,6,3,3,3},
	 						   {5,7,7,7,4,4,4,7,7,7,6,6,7,4,3,3,3,4,7,7,5,5,7,7,1,5,5,5,7,5,5,8,6,7,9,0,0,0,7,7,7,9,1,7,3,1,2,2,2,3,3,6,4,4,3,7,0,0,2,5,6,7,2,5,3,1,1,6,7,1,1,1,2,2,2,8,7,7,5,5,4,2,2,6,6,0,1,1,6,3,5,5,6,9,3,3,2,7,4,8,3,9,6,3,3,4,4,5,3,3,3,6,6,4,7,6,6,6,8,2,7,7,7,6,4,4,4,6,6,5,5,5,8,6,6,6,4,5,7,7,6,6,6,7,7,6,6,6,5,5,5,9,2,2,5,4,4,4,6,6,5,4,4,8}};
	static int[][] weights_fs = {{7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	   		  				 	 {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	   		  				 	 {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	   		  				 	 {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	   		  				 	 {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}};
	static int num_of_freespins = 12;
	static Boolean[] wild = {false,false,false,false,false,false,false,false,true,false};
	static Boolean[] scatter = {false,false,false,false,false,false,false,false,false,true};
	static int[][][] prefix_base = new int[2][5][175];
	static int[][] prefix_fs = new int[5][165];
	
	public static int SectionWeight(int section) {
		int sum = 0;
		if (section == 0) {
			for (int i = 0; i < reelsets_weights_base.length; i++) {
				sum += reelsets_weights_base[i];
			}
		}
		return sum;
	}
	
	public static int ReelWeight(int section, int reelset, int i) {
		int sum = 0;
		if (section == 0) {
			for (int j : weights_base[reelset][i]) {
				sum += j;
			}
		}
		else if (section == 1) {
			for (int j : weights_fs[i]) {
				sum += j;
			}
		}
		else {
			System.out.println("ERROR SECTION");
		}
		return sum;
	}
	public static void Prefix() {
		int pref = 0;
		prefix_base_section[0] = pref;
		for (int i = 1; i <= reelsets_weights_base.length; i++) {
			pref += reelsets_weights_base[i - 1];
			prefix_base_section[i] = pref;
		}
		for (int k = 0; k < weights_base.length; k++) {
			for (int i = 0; i < weights_base[k].length; i++) {
				pref = 0;
				prefix_base[k][i][0] =  pref;
				for (int j = 1; j <= weights_base[k][i].length; j++) {
					pref += weights_base[k][i][j-1];
					prefix_base[k][i][j] =  pref;
				}
			}
		}
		for (int i = 0; i < weights_fs.length; i++) {
			pref = 0;
			for (int j = 0; j < weights_fs[i].length; j++) {
				prefix_fs[i][j] =  pref;
				pref += weights_fs[i][j];
			}
		}
	}
	
	public static int GetReelset(int section, int point) {
		if (point <= 0) {
			return 0;
		}
		if (section == 0) {
			for (int j = 1; j < prefix_base_section.length; j++) {
				if (point < prefix_base_section[j]) {
					return j;
				}
			}
		}
		return -1;
	}
	
	public static int GetReelPosition(int section, int reelset, int i, int point) {
		if (point <= 0) {
			return 0;
		}
		if (section == 0) {
			for (int j = 1; j < prefix_base[reelset][i].length; j++) {
				if (point < prefix_base[reelset][i][j]) {
					return j - 1;
				}
			}
		}
		else if (section == 1) {
			for (int j = 1; j < prefix_fs[i].length; j++) {
				if (point < prefix_fs[i][j]) {
					return j;
				}
			}
		}
		return -1;
	}
	
	Slot() {
		Prefix();
	}
}
